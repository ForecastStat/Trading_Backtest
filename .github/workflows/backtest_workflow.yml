# .github/workflows/backtest_workflow.yml

name: Backtest Trading System

# --- QUANDO ESEGUIRE IL WORKFLOW ---
# Esegue manualmente tramite il pulsante "Run workflow" su GitHub.
on: [workflow_dispatch]

# --- I COMPITI DA SVOLGERE ---
jobs:
  build-and-backtest:
    # Usa l'ultima versione di Ubuntu come sistema operativo
    runs-on: ubuntu-latest

    # --- I PASSAGGI DEL PROCESSO ---
    steps:
      # Passaggio 1: Scarica il codice dal tuo repository
      - name: Check out repository code
        uses: actions/checkout@v4

      # --- INIZIO BLOCCO MODIFICATO ---

      # Passaggio 2: Cache del database AI
      # Questo step è FONDAMENTALE. Cerca di ripristinare il database
      # dell'ultima esecuzione. Se non lo trova, continua senza errori.
      # Salverà il database alla fine di un'esecuzione riuscita.
      - name: Cache AI database for persistence
        id: cache-ai-db
        uses: actions/cache@v4
        with:
          # Il percorso del file che vogliamo salvare tra le esecuzioni
          path: data_backtest/ai_learning/performance.db
          # Una chiave per identificare la cache.
          # Usiamo 'main' per indicare che questa cache appartiene al branch principale.
          # Questo assicura che il DB non venga sovrascritto da test su altri branch.
          key: ${{ runner.os }}-ai-db-main

      # --- FINE BLOCCO MODIFICATO ---

      # Passaggio 3: Prepara l'ambiente Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Una versione stabile e compatibile

      # Passaggio 4: Installa tutte le librerie necessarie
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Assicurati che il file requirements.txt sia corretto e completo
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      # Passaggio 5: Esegui lo script principale del backtest
      - name: Run the Backtest Orchestrator
        run: python backtest_orchestrator.py

      # --- INIZIO BLOCCO MODIFICATO ---

      # Passaggio 6: Salva i risultati generati come "Artifacts"
      # Questo step viene eseguito SEMPRE, anche se il backtest fallisce,
      # per permetterci di analizzare i log e capire cosa è andato storto.
      - name: Upload Backtest Artifacts
        if: always() # Esegui sempre questo passaggio
        uses: actions/upload-artifact@v4
        with:
          # Un nome descrittivo per il file .zip che verrà generato
          name: backtest-full-results-2015
          # Elenco di tutti i file e le cartelle che vogliamo salvare.
          # Ho incluso anche i file che avevi già e ho aggiunto il log
          # generato dalla nuova configurazione in orchestrator.
          path: |
            backtest_results.csv
            data_backtest/ai_learning/performance.db
            data_backtest/reports/backtest_log.txt
            data_backtest/trading_integrated.log

      # --- FINE BLOCCO MODIFICATO ---
